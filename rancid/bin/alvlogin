#! /usr/bin/expect --
##
## $Id: clogin.in 2255 2010-10-06 20:31:24Z heas $
##
## rancid 2.3.6
## Copyright (c) 1997-2009 by Terrapin Communications, Inc.
## All rights reserved.
##
## This code is derived from software contributed to and maintained by
## Terrapin Communications, Inc. by Henry Kilmer, John Heasley, Andrew Partan,
## Pete Whiting, Austin Schutz, and Andrew Fort.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in the
##    documentation and/or other materials provided with the distribution.
## 3. All advertising materials mentioning features or use of this software
##    must display the following acknowledgement:
##        This product includes software developed by Terrapin Communications,
##        Inc. and its contributors for RANCID.
## 4. Neither the name of Terrapin Communications, Inc. nor the names of its
##    contributors may be used to endorse or promote products derived from
##    this software without specific prior written permission.
## 5. It is requested that non-binding fixes and modifications be contributed
##    back to Terrapin Communications, Inc.
##
## THIS SOFTWARE IS PROVIDED BY Terrapin Communications, INC. AND CONTRIBUTORS
## ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
## TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
## PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COMPANY OR CONTRIBUTORS
## BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
# 
#  The expect login scripts were based on Erik Sherk's gwtn, by permission.
# 
# clogin - Cisco login
#
# Most options are intuitive for logging into a Cisco router.
# The default is to enable (thus -noenable).  Some folks have
# setup tacacs to have a user login at priv-lvl = 15 (enabled)
# so the -autoenable flag was added for this case (don't go through
# the process of enabling and the prompt will be the "#" prompt.
# The default username password is the same as the vty password.
#

####
# Modified by Antonio Russo <rssntn67 @ yahoo.it> on 14/01/2011
# to accommodate for the Alvarion Breeze Net Routers
####

# Usage line
set usage "Usage: $argv0 \[-dV\] \[-readonly\] \[-installer\] \[-administrator\] \[-c command\] \
\[-Evar=x\] \[-e administrator-password\] \[-f cloginrc-file\] \[-p readonly-password\] \
\[-s script-file\] \[-t timeout\] \[-u installer-password\] \
\[-x command-file\] router \[router...\]\n"

# env(CLOGIN) may contain:
#	x == do not set xterm banner or name

# Password file
set password_file $env(HOME)/.cloginrc
# Default is to login to the router
set do_command 0
set do_script 0
# The default is to log readonly
# loginlevel 1 ----->readonly
# loginlevel 2 ----->installer
# loginlevel 0 ----->administrator 
set loginlevel 0
# The default is to look in the password file to find the passwords.  This
# tracks if we receive them on the command line.
set do_ropasswd 1
set do_adpasswd 1
set do_inpasswd 1
# Sometimes routers take awhile to answer (the default is 10 sec)
set timeoutdflt 45
#
set send_human {.4 .4 .7 .3 5}

if {[ info exists env(CLOGINRC) ]} {
    set password_file $env(CLOGINRC)
}

# Process the command line
for {set i 0} {$i < $argc} {incr i} {
    set arg [lindex $argv $i]

    switch  -glob -- $arg {
	# Expect debug mode
	-d* {
	    exp_internal 1
	# readonly Password
	} -p* {
	    if {! [regexp .\[pP\](.+) $arg ignore ropasswd]} {
		incr i
		set ropasswd [ lindex $argv $i ]
	    }
	    set do_ropasswd 0
	# Installer Password
	} -u* {
	    if {! [regexp .\[vV\](.+) $arg ignore inpasswd]} {
		incr i
		set inpasswd [ lindex $argv $i ]
	    }
	    set do_inpasswd 0
	# Version string
	} -V* {
	    send_user "rancid 2.3.6\n"
	    exit 0
	# Environment variable to pass to -s scripts
	} -E* {
	    if {[regexp .\[E\](.+)=(.+) $arg ignore varname varvalue]} {
		set E$varname $varvalue
	    } else {
		send_user "\nError: invalid format for -E in $arg\n"
		exit 1
	    }
	# administrator Password
	} -e* {
	    if {! [regexp .\[e\](.+) $arg ignore adpasswd]} {
		incr i
		set adpasswd [ lindex $argv $i ]
	    }
	    set do_adpasswd 0
	# Command to run.
	} -c* {
	    if {! [regexp .\[cC\](.+) $arg ignore command]} {
		incr i
		set command [ lindex $argv $i ]
	    }
	    set do_command 1
	# Expect script to run.
	} -s* {
	    if {! [regexp .\[sS\](.+) $arg ignore sfile]} {
		incr i
		set sfile [ lindex $argv $i ]
	    }
	    if { ! [ file readable $sfile ] } {
		send_user "\nError: Can't read $sfile\n"
		exit 1
	    }
	    set do_script 1
	# alternate cloginrc file
	} -f* {
	    if {! [regexp .\[fF\](.+) $arg ignore password_file]} {
		incr i
		set password_file [ lindex $argv $i ]
	    }
	# Timeout
	} -t* {
	    if {! [regexp .\[tT\](.+) $arg ignore timeout]} {
		incr i
	        set timeoutdflt [ lindex $argv $i ]
	    }
	# Command file
	} -x* {
	    if {! [regexp .\[xX\](.+) $arg ignore cmd_file]} {
		incr i
		set cmd_file [ lindex $argv $i ]
	    }
	    if [ catch {set cmd_fd [open $cmd_file r]} reason ] {
		send_user "\nError: $reason\n"
		exit 1
	    }
	    set cmd_text [read $cmd_fd]
	    close $cmd_fd
	    set command [join [split $cmd_text \n] \;]
	    set do_command 1
	# Do we readonly?
	} -readonly {
	    set loginlevel 1
	# Do we installer?
	} -installer {
	    set loginlevel 2
	# Do we administrator?
	} -administrator? {
	    set loginlevel 0
	} -* {
	    send_user "\nError: Unknown argument! $arg\n"
	    send_user $usage
	    exit 1
	} default {
	    break
	}
    }
}
# Process routers...no routers listed is an error.
if { $i == $argc } {
    send_user "\nError: $usage"
}

# Only be quiet if we are running a script (it can log its output
# on its own)
if { $do_script } {
    log_user 0
} else {
    log_user 1
}

#
# Done configuration/variable setting.  Now run with it...
#

# Sets Xterm title if interactive...if its an xterm and the user cares
proc label { host } {
    global env
    # if CLOGIN has an 'x' in it, don't set the xterm name/banner
    if [info exists env(CLOGIN)] {
	if {[string first "x" $env(CLOGIN)] != -1} { return }
    }
    # take host from ENV(TERM)
    if [info exists env(TERM)] {
	if [ regexp \^(xterm|vs) $env(TERM) ignore ] {
	    send_user "\033]1;[lindex [split $host "."] 0]\a"
	    send_user "\033]2;$host\a"
	}
    }
}

# This is a helper function to make the password file easier to
# maintain.  Using this the password file has the form:
# add password sl*	pete cow
# add password at*	steve
# add password *	hanky-pie
proc add {var args} { global int_$var ; lappend int_$var $args}
proc include {args} {
    global env
    regsub -all "(^{|}$)" $args {} args
    if { [ regexp "^/" $args ignore ] == 0 } {
	set args $env(HOME)/$args
    }
    source_password_file $args
}

proc find {var router} {
    upvar int_$var list
    if { [info exists list] } {
	foreach line $list {
	    if { [string match [lindex $line 0] $router ] } {
		return [lrange $line 1 end]
	    }
	}
    }
    return {}
}

# Loads the password file.  Note that as this file is tcl, and that
# it is sourced, the user better know what to put in there, as it
# could install more than just password info...  I will assume however,
# that a "bad guy" could just as easy put such code in the clogin
# script, so I will leave .cloginrc as just an extention of that script
proc source_password_file { password_file } {
    global env
    if { ! [file exists $password_file] } {
	send_user "\nError: password file ($password_file) does not exist\n"
	exit 1
    }
    file stat $password_file fileinfo
    if { [expr ($fileinfo(mode) & 007)] != 0000 } {
	send_user "\nError: $password_file must not be world readable/writable\n"
	exit 1
    }
    if [ catch {source $password_file} reason ] {
	send_user "\nError: $reason\n"
	exit 1
    }
}

# Log into the router.
# returns: 0 on success, 1 on failure, -1 if rsh was used successfully
proc login { router loginlevel passwd cmethod } {
    global spawn_id in_proc do_command exitval
    global command prompt prompt_match u_prompt p_prompt
    set in_proc 1	
	
    # try each of the connection methods in $cmethod until one is successful
    set progs [llength $cmethod]
    foreach prog [lrange $cmethod 0 end] {
	incr progs -1
	if [string match "tftp*" $prog] {
	    if { ! $do_command } {
		if { [llength $cmethod] == 1 } {
		    send_user "\nError: tftp is an invalid method for "
		    send_user "interactive logins\n"
		}
		if { $progs == 0 } {
		    return 1
		}
		continue;
	    }
	    
		regexp {tftp(:([^[:space:]]+))*} $prog 
		
		set retval [ catch {spawn tftp $router} reason ]
	    
		if { $retval } {
		send_user "\nError: tftp failed: $reason\n"
		return 1
	    }
		set tftp_id $spawn_id
		set tftp_error 0;
		set commands [split $command \;]
		set num_commands [llength $commands]
		for {set i 0} {$i < $num_commands} { incr i} {
			expect {
			-re "Transfer timed out" {
				send_user "\nError: tftp TIMEOUT reached\n"
				set tftp_error 1 
				break
				}
			-re "unknown host" {
				send_user "\nError: tftp unknown host \n"
				set tftp_error 1
				break
				}
			-re "Invalid command" {
				send_user "\nError: tftp Invalid command \n"
				set tftp_error 1
				break
				}
			-re "Error" {
				send_user "\nError: tftp error \n"
				set tftp_error 1
				break
				}
			"tftp>"
			}
			send -- "[subst -nocommands [lindex $commands $i]]\r"
		}
		
		expect {
		-re "Transfer timed out" {
			send_user "\nError: tftp TIMEOUT reached\n"
			set tftp_error 1 
			exp_continue
		}
		-re "Invalid command" {
			send_user "\nError: tftp Invalid command \n"
			set tftp_error 1
			exp_continue
		}
		-re "Error" {
			send_user "\nError: tftp error \n"
			set tftp_error 1
			exp_continue
		}
		"tftp>" {
			send -h "quit\r"
			} 
		timeout {
			close -i $tftp_id
			return 1
			} 
		eof {
			return 1
        }
		}

		if { $tftp_error } {
			return 1
		}
		send_user "\n$router# exit\n"
		set exitval -1
		return $exitval
	} elseif [string match "telnet*" $prog] {

	    regexp {telnet(:([^[:space:]]+))*} $prog methcmd suffix port

	    if {"$port" == ""} {
		set retval [ catch {spawn telnet $router} reason ]
	    } else {
		set retval [ catch {spawn telnet $router $port} reason ]
	    }

	    if { $retval } {
		send_user "\nError: telnet failed: $reason\n"
		return 1
	    }

	} else {
	    send_user "\nError: unknown connection method: $prog\n"
	    return 1
	}
	sleep 0.3

	# This helps cleanup each expect clause.
	expect_after {
	    timeout {
		send_user "\nError: TIMEOUT reached\n"
		catch {close}; catch {wait};
		if { $in_proc} {
		    return 1
		} else {
		    continue
		}
	    } eof {
		send_user "\nError: EOF received\n"
		catch {close}; catch {wait};
		if { $in_proc} {
		    return 1
		} else {
		    continue
		}
	    }
	}


	send_user "Established Connection to $router\n"

	set main_menu 1
    expect {
	-re "(Connection refused|Secure connection \[^\n\r]+ refused)" {
	    catch {close}; catch {wait};
	    if !$progs {
		send_user "\nError: Connection Refused ($prog): $router\n"
		return 1
	    }
	}
	-re "(Connection closed by|Connection to \[^\n\r]+ closed)" {
	    catch {close}; catch {wait};
	    if !$progs {
		send_user "\nError: Connection closed ($prog): $router\n"
		return 1
	    }
	}
	-re "(Name or service not known)" {
	    catch {close}; catch {wait};
	    if !$progs {
	    send_user "\nError: Unknown host $router\n";
		return 1
	    }
	}
	eof { send_user "\nError: Couldn't login: $router\n"; wait; return 1 }
	-nocase "unknown host\r" {
	    send_user "\nError: Unknown host $router\n";
	    catch {close}; catch {wait};
	    return 1
	}
	"Host is unreachable" {
	    send_user "\nError: Host Unreachable: $router\n";
	    catch {close}; catch {wait};
	    return 1
	}
	"No address associated with name" {
	    send_user "\nError: Unknown host $router\n";
	    catch {close}; catch {wait};
	    return 1
	}
	-re "(Wrong Password!!!)"	{
				  send_user "\nError: Check your passwd for $router\n"
				  catch {close}; catch {wait}; return 1
				}
	-re "$p_prompt"		{
				  sleep 1
				  send -- "$passwd\r"
				  exp_continue
				}
	-re "$u_prompt"		{
				  if { $main_menu } {
				  send -- "$loginlevel"
				  set main_menu 0
				  } else {
				  set prompt_match $expect_out(0,string);
				  break;
				  }
				  exp_continue
				}
     }
    }

    set in_proc 0
    return 0
}

# Run commands given on the command line.
proc run_commands { prompt command } {
    global in_proc log_user
    set in_proc 1

	set reprompt $prompt

    # this is the only way i see to get rid of more prompts in o/p..grrrrr
    log_user 1

    set commands [split $command \;]
    set num_commands [llength $commands]
    # the pager can not be turned off on the PIX, so we have to look
    # for the "More" prompt.  the extreme is equally obnoxious, with a
    # global switch in the config.
    for {set i 0} {$i < $num_commands} { incr i} {
	send -- "[subst -nocommands [lindex $commands $i]]"
	expect {
		-re "Press any key to return" {
			send "A"
			exp_continue
		}
 	    -re "$reprompt"		{ 
			send_user -- "$expect_out(buffer)"
		}
    }
	}
	log_user 0

	send "\033"

	set found_last_screen 0
    expect {
	-re "^X - Exit" {
		set found_last_screen 1
		exp_continue
	}
	-re "^\[^\n\r *]*$reprompt"		{
						if { $found_last_screen } {
						send -h "X"
						} else {
						send "\033"
						exp_continue
						}
						}
	-re "\[\n\r]+"				{ exp_continue }
	timeout					{ catch {close}; catch {wait};
						  return 0
						}
	eof					{ return 0 }
    }
    set in_proc 0
}

#
# For each router... (this is main loop)
#
source_password_file $password_file
set in_proc 0
set exitval 0
set prompt_match ""
foreach router [lrange $argv $i end] {
    set router [string tolower $router]
    # attempt at platform switching.
    send_user -- "$router\n"

    # device timeout
    set timeout [find timeout $router]
    if { [llength $timeout] == 0 } {
	set timeout $timeoutdflt
    }

    # Default prompt.
    set prompt "(>|#| \\(enable\\))"

    # Figure out passwords for specified loginlevel
	# administrator?
	if { $loginlevel == 0 } {
	if { $do_adpasswd } {
      set pswd [find password $router]
      if { [llength $pswd] < 2 } {
	  send_user -- "\nError: no administrator-password for $router in $password_file.\n"
	  continue
      }
      set adpasswd [join [lindex $pswd 1] ""]
	}
	  set passwd $adpasswd
	}

	# readonly?
	if { $loginlevel == 1 } {
	if { $do_ropasswd } {
      set pswd [find password $router]
      if { [llength $pswd] == 0 } {
	  send_user -- "\nError: no readonly-password for $router in $password_file.\n"
	  continue
      }
      set ropasswd [join [lindex $pswd 0] ""]
	}
	  set passwd $ropasswd
	}
	
	# installer?
	if { $loginlevel == 2 } {
	if { $do_inpasswd } {
      set pswd [find username $router]
      if { [llength $pswd] == 0 } {
	  send_user -- "\nError: no readonly-password for $router in $password_file.\n"
	  continue
      }
      set inpasswd [join [lindex $pswd 0] ""]
	}
	  set passwd $inpasswd
	}

    # Figure out prompts
    set u_prompt [find userprompt $router]
    if { "$u_prompt" == "" } {
	set u_prompt "(>>>)"
    } else {
	set u_prompt [join [lindex $u_prompt 0] ""]
    }
    set p_prompt [find passprompt $router]
    if { "$p_prompt" == "" } {
	set p_prompt "(password)"
    } else {
	set p_prompt [join [lindex $p_prompt 0] ""]
    }

    # Figure out connection method
    set cmethod [find method $router]
    if { "$cmethod" == "" } { set cmethod {{telnet} {tftp}} }

    # Login or tfpt to the router
    if {[login $router $loginlevel $passwd $cmethod ]} {
	incr exitval
	
	# if login failed or tftp was unsuccessful, move on to the next device
	continue
    }
    
	set prompt $u_prompt

    if { $do_command } {
	if {[run_commands $prompt $command]} {
	    incr exitval
	    continue
	}
    } elseif { $do_script } {
	source $sfile
	catch {close};
    } else {
	label $router
	log_user 1
	interact
    }

    # End of for each router
    catch {wait};
    sleep 0.3
}
exit $exitval
